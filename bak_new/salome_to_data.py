#!/usr/bin/env python

#import vtk
import os
import sys
import re
import glob
import math
import numpy as np
from optparse import OptionParser, OptionValueError

arrSize = 1500

# parse command line
p = OptionParser(usage="""usage: %prog [options] <casename>

Read .mesh file for the model geometry and write to .dat file which is used for Tecplot
.mesh files are generated by SALOME by reading .cgns file which is genrated by FLUENT Mesh
NOTE: Save Ansys mesh file in .CGNS format which can be read by SALOME. Then save as .mesh

python salome_to_data "wall.mesh"

""")


p.add_option("-v", action="store_true", dest="verbose",  help="Verbose")
#p.add_option("-a", action="store_true", dest="ascii",  help="ASCII, instead of binary, VTK output")
(opts, args) = p.parse_args()

if len(args) < 1:
   print ("check input and output files")
   sys.exit(0)
(file_name) = args[0]

#mesh_files = glob.glob("*.mesh")
#padit = int(math.log10(len(mesh_files))+1)

#print padit
#sys.exit(0)

if opts.verbose:print ("Reading SALOME mesh file")
vertices = False
triangle = False
vertices_data = []
triangles_data = []

f = open(file_name, "r")
for line in f:
  if not line.split():
    continue
  tuple = line.split()
  
  if vertices:
    vertices_data.append(line)
  if triangle:
    triangles_data.append(line)

  if tuple[0] == "Vertices":
    vertices = True
  if tuple[0] == "Edges":
    vertices = False
  if tuple[0] == "Triangles":
    triangle = True
  if tuple[0] == "End":
    triangle = False

f.close()

#print(len(vertices_data))
#print(len(triangles_data))
# sys.exit(0)

f = open(file_name[:-5]+".dat","w")
#f.write(str(len(vertices_data))+"\n")

if opts.verbose:print ("Writing mesh data to "+file_name[:-5]+".dat")
# Write veritces 
f.write("Variable = x, y, z, vx, vy, vz, v d\n")
f.write('ZONE T = "wall", N='+vertices_data[0].strip()+', \
  E= '+triangles_data[0].strip()+', F=FEPOINT, ET=triangle\n')
for i in range(1,int(vertices_data[0])+1):
  tuple = vertices_data[i].split()
  f.write(str(round(float(tuple[0])*1.0e3,3))+" "+str(round(float(tuple[1])*1.0e3,3))+\
          " "+str(round(float(tuple[2])*1.0e3,3))+"   0   0   0   0.0  "+str(i)+"\n")

# Write connectivity
for i in range(1,int(triangles_data[0])+1):
  tuple = triangles_data[i].split()
  f.write(tuple[0]+" "+tuple[1]+" "+tuple[2]+"\n")

f.write("\n")

count = 0
path = "particle.dat"
if opts.verbose:print ("Reading particle data from directory "+path)
fin = open(path,"r")
for line in fin:
  tuple = line.split()
  if(float(tuple[2]) != 0):
    if(tuple[0] == "TIME"):
      f.write('\nZONE T = particle\n')
    else:
      #f.write(" ".join(tuple)+" 0.0\n")
      velMag = np.sqrt(pow(float(tuple[3]),2)+pow(float(tuple[4]),2)+pow(float(tuple[5]),2))
      f.write(str(round(float(tuple[0])*10,2))+" "+str(round(float(tuple[1])*10,2))+" "+\
      str(round(float(tuple[2])*10,2))+" "+str(round(float(tuple[3]),2))+" "+str(round(float(tuple[4]),3))+" "+\
      str(round(float(tuple[5]),3))+" "+str(round(float(tuple[6])*10,3))+" "+str(round(velMag,3))+"\n")
  count += 1

fin.close()

f.close()

print('written to "',file_name[:-5]+'.dat"')
print ("DONE")
sys.exit(3)
